@model ToursVM
@{
    ViewData["Title"] = "Tours";
    Layout = "_Layout1";
    var championName = TempData["ChampionName"] as string;
    var UserCount = TempData["UserCount"] as string;
    string userName = User.Identity.Name;

    if (!string.IsNullOrEmpty(userName) && char.IsLower(userName[0]))
    {
        userName = char.ToUpper(userName[0]) + userName.Substring(1);
    }

}

<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
<style>
    a {
        display: flex;
        /* Your styles go here */
        text-decoration: none;
        color: #007bff; /* Change the color to your preference */
        /* Add any other styles you want */
    }

    .flex-container {
        display: flex;
        align-items: end;
        gap: 12px;
    }

    .text4 {
        transition: color 0.3s; /* Add a smooth transition effect */
    }

        .text4:hover {
            color: white; /* Change the text color to white on hover */
        }

  .loader {
    display: none; /* Initially hidden */
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.5); /* Semi-transparent background */
    z-index: 9999; /* Make sure it's above everything else */
    text-align: center;
    padding-top: 20%; /* Adjust as needed */
}

/* Loader animation */
.loader:after {
    content: "";
    width: 120px; /* Increased size */
    height: 120px; /* Increased size */
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -60px 0 0 -60px; /* Adjusted margin for the larger size */
    border: 12px solid #f3f3f3; /* Light grey border */
    border-top: 12px solid #7F56D9; /* Blue border for animation */
    border-radius: 50%;
    animation: spin 1s linear infinite; /* Spin animation */
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}


</style>
<link href="~/turnuvalar/style.css" rel="stylesheet" />

<div class="main-wrap">
    <div class="main">
        <div class="main2">
            <div class="header-section">
                <div class="container">
                    <div class="page-header">
                        <div class="content5">
                            <div class="text-and-supporting-text2">
                                <div class="text5">@Model.Tournament.Name.ToUpper()</div>
                                <div class="supporting-text2">
                                    Turnuva skor kayıt sayfası. Tur skorlarını kayıt edebilir, yeni kuralar çekebilirsiniz.
                                </div>
                                @if (!string.IsNullOrEmpty(UserCount))
                                {


                                    <div class="alert alert-danger mt-3 w-100">
                                        @TempData["UserCount"]
                                    </div>


                                }
                            </div>
                            <div class="actions">
                                <div class="button2">
                                    <div class="button-base2">
                                        <div class="text6">@userName</div>
                                    </div>
                                </div>
                                <div class="button3">
                                    <div class="button-base3">
                                        <svg class="log-out2"
                                             width="20"
                                             height="20"
                                             viewBox="0 0 20 20"
                                             fill="none"
                                             xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7.5 17.5H4.16667C3.72464 17.5 3.30072 17.3244 2.98816 17.0118C2.67559 16.6993 2.5 16.2754 2.5 15.8333V4.16667C2.5 3.72464 2.67559 3.30072 2.98816 2.98816C3.30072 2.67559 3.72464 2.5 4.16667 2.5H7.5M13.3333 14.1667L17.5 10M17.5 10L13.3333 5.83333M17.5 10H7.5"
                                                  stroke="white"
                                                  stroke-width="1.67"
                                                  stroke-linecap="round"
                                                  stroke-linejoin="round" />
                                        </svg>

                                        @if (User.Identity.IsAuthenticated)
                                        {
                                            <a class="text4" asp-action="SignOut" asp-controller="User">Çıkış yap</a>
                                        }
                                        else
                                        {
                                            <a class="text4" asp-action="SignIn" asp-controller="User">Giriş</a>
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex w-100 justify-content-end">
                        <div>
                            <svg width="31" height="22" viewBox="0 0 31 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M22.2929 0.292892L15.9289 6.65686C15.5384 7.04738 15.5384 7.68054 15.9289 8.07107C16.3195 8.46159 16.9526 8.46159 17.3432 8.07107L22 3.41421V21H24V3.41421L28.6569 8.07107C29.0474 8.46159 29.6806 8.46159 30.0711 8.07107C30.4616 7.68054 30.4616 7.04738 30.0711 6.65685L23.7071 0.292892C23.3166 -0.0976315 22.6834 -0.0976314 22.2929 0.292892ZM8.70712 21.7071L15.0711 15.3431C15.4616 14.9526 15.4616 14.3195 15.0711 13.9289C14.6806 13.5384 14.0474 13.5384 13.6569 13.9289L9.00001 18.5858L9.00001 1H7.00001L7.00001 18.5858L2.34315 13.9289C1.95263 13.5384 1.31947 13.5384 0.928941 13.9289C0.538417 14.3195 0.538417 14.9526 0.928941 15.3431L7.2929 21.7071C7.68343 22.0976 8.31659 22.0976 8.70712 21.7071Z" fill="#7F56D9" />
                            </svg>

                        </div>
                        <a class="badge-base4" asp-action="TUserList" asp-controller="Tournament" asp-route-tournamentId="@Model.Tournament.Id">
                            <div class="text18" style="color:#7F56D9">Sıralama</div>
                        </a>
                    </div>
                    @*<form asp-controller="Tournament" asp-action="SaveScores" method="post">
                         <input type="hidden" name="ActionSource" value="SendMessageButton" />
                        <button type="submit" class="btn btn-primary">Mesaj Gönder</button>
                    </form>*@
                </div>
            </div>

            @if (Model.AllPairsHaveZeroScore || Model.SaveScore)
            {


                <div class="frame-7">
                    <!-- Checkbox -->
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="showZeroScoresCheckbox" checked>
                    <label class="form-check-label" for="showZeroScoresCheckbox">
                        Girilen skorları gizle
                    </label>
                </div>
                    <ul class="nav nav-tabs " style="display:inline-flex; flex-direction:row">
                        @foreach (var item in Model.Tournament.Tours.OrderBy(x => x.Id).SkipLast(1))
                        {

                            <li class="nav-item" role="presentation">
                                <a class="nav-link" id="@item.Name-tab" data-bs-toggle="tab" data-bs-target="#@item.Name-pane" role="tab" aria-controls="@item.Name-pane" aria-selected="true"><span style="color:#7F56D9">@item.Name</span></a>
                            </li>

                        }
                        <li class="nav-item" role="presentation">
                            <a class="nav-link active" id="LastTab-tab" data-bs-toggle="tab" data-bs-target="#LastTab-pane" role="tab" aria-controls="LastTab-pane" aria-selected="true"><span style="color:#7F56D9">Tur @Model.Tournament.Tours.Count()</span></a>
                        </li>
                    </ul>

                    <div class="tab-content">
                        @foreach (var p in Model.Tournament.Tours)
                        {
                            <div class="tab-pane fade" id="@p.Name-pane" role="tabpanel" aria-labelledby="@p.Name-tab" tabindex="0">
                                @foreach (var item in p.Pairs)
                                {
                                    if (item.TourId == p.Id) // Assuming there's a property like TourId in your pair model
                                    {
                                        var scoresForCurrentPair = Model.Scores.FirstOrDefault(s => s.PairId == item.Id);

                                        <div>
                                            <p>
                                                @(scoresForCurrentPair != null
                                ? $"{scoresForCurrentPair.User1Name} : {item.User1Score} - {item.User2Score} : {scoresForCurrentPair.User2Name}"
                                : "Scores not available")
                                            </p>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        <!-- Last Tab Content -->
                        <div class="tab-pane  show active" id="LastTab-pane" role="tabpanel" aria-labelledby="LastTab-tab" tabindex="0">
                            <form asp-action="SaveScores" method="post" id="scoresForm">

                                <table class="table" id="scoresTable">

                                    <tbody>

                                        @for (int i = 0; i < Model.PairVMs.Count; i++)
                                        {
                                            <tr>
                                                @if (Model.Tournament.Tours.Any())
                                                {
                                                    var maxTourId = Model.Tournament.Tours.Max(t => t.Id);
                                                    var scoresForCurrentTour = Model.Scores.Where(s => s.TourId == maxTourId).ToList();


                                                    if (scoresForCurrentTour.Any())
                                                    {
                                                        var score = scoresForCurrentTour[i];
                                                        <input type="hidden" name="Scores[@i].PairId" value="@score.PairId" />
                                                        <input type="hidden" name="Scores[@i].TournamentId" value="@Model.Tournament.Id" />
                                                         <input type="hidden" value="@Model.PairVMs[i].User1?.PhoneNumber" name="Scores[@i].User1PhoneNumber"  />
                                                         <input type="hidden" value="@Model.PairVMs[i].User2?.PhoneNumber"  name="Scores[@i].User2PhoneNumber"  />
                                                         <input type="hidden" value="@($"{Model.PairVMs[i].User1?.Name} {Model.PairVMs[i].User1?.SurName}")" name="Scores[@i].User1Name"  />
                                                         <input type="hidden" value="@($"{Model.PairVMs[i].User2?.Name} {Model.PairVMs[i].User2?.SurName}")"   name="Scores[@i].User2Name"  />
                                                        <td>@(i + 1)</td> 
                                                        <td>@Model.PairVMs[i].User1.Name @Model.PairVMs[i].User1.SurName</td>

                                                        @if (Model.PairVMs[i].User2 != null)
                                                        {
                                                            <td>
                                                                <input type="number" name="Scores[@i].User1Score" value="@score.User1Score" onclick="clearInput(this)" />
                                                                <input type="hidden" name="User1Name" value="@score.User1Name" />
                                                            </td>
                                                            <td>
                                                                <input type="number" name="Scores[@i].User2Score" value="@score.User2Score" onclick="clearInput(this)" />
                                                                <input type="hidden" name="User2Name" value="@score.User2Name" />
                                                            </td>
                                                            <td>@Model.PairVMs[i].User2.Name @Model.PairVMs[i].User2.SurName</td>
                                                        }
                                                        else
                                                        {
                                                            <td><span>Bye</span></td>
                                                            <td></td> <!-- Empty cell for User1Score -->
                                                            <td></td> <!-- Empty cell for User2Score -->
                                                        }
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                  <!-- Hidden input field for actionSource -->
                                  <input type="hidden" id="actionSource" name="actionSource" value="" />
                                <div class="d-flex justify-content-between">
                                     <button type="button" class="btn btn-primary" style="background-color:#7F56D9; border-color:#7F56D9" data-bs-toggle="modal" data-bs-target="#myModalSkor">Skorları Kaydet</button>
                                 <button type="submit" class="btn btn-outline-secondary"  onclick="setActionSource('mesajGonder')" >Mesaj Gönder</button>
                                  </div>
                                
                                 <div id="loader" class="loader">Bekleyiniz</div>
                                <!-- Modal starts -->
                                <div class="modal" id="myModalSkor">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Skor Kayıt</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                Skorlar kayıt edilecek. Onaylıyor musunuz?
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                                                <button type="submit" class="btn btn-primary">Onayla</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- Modal ends -->
                            </form>
                        </div>
                    </div>
                </div>

            }
            else
            {

                <div class="frame-7">
                    <ul class="nav nav-tabs " style="display:inline-flex; flex-direction:row">
                        @foreach (var item in Model.Tournament.Tours)
                        {

                            <li class="nav-item" role="presentation">
                                <a class="nav-link" id="@item.Name-tab" data-bs-toggle="tab" data-bs-target="#@item.Name-pane" role="tab" aria-controls="@item.Name-pane" aria-selected="true">@item.Name</a>
                            </li>
                        }
                    </ul>

                    <div class="tab-content">
                        @foreach (var p in Model.Tournament.Tours)
                        {
                            <div class="tab-pane fade" id="@p.Name-pane" role="tabpanel" aria-labelledby="@p.Name-tab" tabindex="0">
                                @foreach (var item in p.Pairs)
                                {
                                    if (item.TourId == p.Id) // Assuming there's a property like TourId in your pair model
                                    {
                                        var scoresForCurrentPair = Model.Scores.FirstOrDefault(s => s.PairId == item.Id);

                                        <div>
                                            <p>
                                                @(scoresForCurrentPair != null
                                ? $"{scoresForCurrentPair.User1Name} : {item.User1Score} - {item.User2Score} : {scoresForCurrentPair.User2Name}"
                                : "Scores not available")
                                            </p>
                                        </div>
                                    }
                                }
                            </div>
                        }

                    </div>


                    @if (!string.IsNullOrEmpty(championName))
                    {

                        <div class="btn btn-danger">
                            Şampiyon: @championName
                        </div>

                    }
                    else
                    {

                        <form asp-action="DrawLot" method="post" id="drawLotForm">
                            <input type="hidden" value="@Model.Tournament.Id" name="Id" />
                            <input type="hidden" value="@Model.Tournament.PlayLife" name="PlayLife" />
                            <input type="hidden" value="@Model.Tournament.Type" name="Type" />
                            <input type="hidden" value="@Model.Tournament.ByeType" name="ByeType" />
                            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#myModal">Tur#@(Model.Tournament.Tours.Count() + 1) Kura Çek </button>

                             <!-- Loader for DrawLot form -->
                             <div id="drawLotLoader" class="loader">Bekleyiniz</div>
                            <!-- Modal starts -->
                            <div class="modal" id="myModal">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Kura Çek</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            Tur#@(Model.Tournament.Tours.Count() + 1) Kurası Çekilecek. Onaylıyor musunuz?
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                                            <button type="submit" class="btn btn-primary">Onayla</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Modal ends -->
                        </form>
                    }

                </div>
            }

        </div>
    </div>
</div>
@section Script{
    <script>
            // Add event listener to the checkbox for change event
       document.addEventListener("DOMContentLoaded", function() {
            var showZeroScoresCheckbox = document.getElementById('showZeroScoresCheckbox');
            var rows = document.querySelectorAll('#scoresTable tbody tr');

            function toggleRowsVisibility() {
                var showOnlyZeroScores = showZeroScoresCheckbox.checked; // Use checkbox state directly

                rows.forEach(function(row) {
                    var user1ScoreInput = row.querySelector('input[name^="Scores["][name$="].User1Score"]');
                    var user2ScoreInput = row.querySelector('input[name^="Scores["][name$="].User2Score"]');
                    var user1Score = user1ScoreInput ? parseInt(user1ScoreInput.value) : null;
                    var user2Score = user2ScoreInput ? parseInt(user2ScoreInput.value) : null;

                    if (showOnlyZeroScores && (user1Score !== 0 || user2Score !== 0)) { // Show only if both scores are non-zero
                        row.style.display = 'none';
                    } else {
                        row.style.display = '';
                    }

                    if(user2Score == null){
                         row.style.display = '';
                    }

                });
            }

            toggleRowsVisibility(); // Initially hide/show rows based on checkbox state

            // Add event listener to checkbox for change event
            showZeroScoresCheckbox.addEventListener('change', toggleRowsVisibility);
        });
        document.addEventListener("DOMContentLoaded", function() {
        var saveScoresButton = document.querySelector('button[data-bs-target="#myModalSkor"]');
        saveScoresButton.addEventListener("click", function() {
            document.getElementById('actionSource').value = null; // Set actionSource to null when "Skorları Kaydet" is clicked
        });
        });
          function setActionSource(value) {
        // Set the value of actionSource
        document.getElementById('actionSource').value = value;
        var rows = document.querySelectorAll('table tr'); // Tablodaki tüm satırları alın

        // Tablodaki her satırın sıralı halini koruyabilirsiniz
        rows.forEach(function(row, index) {
            row.querySelector('td:first-child').innerText = index + 1; // İlk sütunları sıralı tutar
        });
        }
       
        // Function to clear the default value when an input field is clicked
        function clearInput(input) {
            // Check if the current value is not zero
            if (input.value == "0") {
                input.value = "";
            }
        }

        // Function to set the value to 0 when the user exits the field without entering a value
        function setDefaultValue(input) {
            if (input.value === "") {
                input.value = "0"; // You can also use 0 directly without quotes
            }
        }

        // Attach an event listener for the blur event (when the input loses focus)
        document.addEventListener('blur', function(event) {
            // Check if the event target is an input element
            if (event.target.tagName.toLowerCase() === 'input') {
                // Call the setDefaultValue function when the input loses focus
                setDefaultValue(event.target);
            }
        }, true);
                     // Function to show the loader for DrawLot form
        function showDrawLotLoader() {
            document.getElementById("drawLotLoader").style.display = "block";
        }

        // Function to hide the loader for DrawLot form
        function hideDrawLotLoader() {
            document.getElementById("drawLotLoader").style.display = "none";
        }

        // Wrap the event listener in a function to ensure it's executed after the DOM is loaded
        function initializeDrawLotForm() {
            // Add event listener for DrawLot form submission
            document.getElementById("drawLotForm").addEventListener("submit", function () {
                // Show loader when DrawLot form is submitted
                showDrawLotLoader();
            });
        }

        // Add event listener to execute the initialization function when the DOM is loaded
        document.addEventListener("DOMContentLoaded", function () {
            initializeDrawLotForm();
        });

    function showLoader() {
        document.getElementById("loader").style.display = "block";
    }

    // Function to hide the loader
    function hideLoader() {
        document.getElementById("loader").style.display = "none";
    }

    // Add event listener for form submission
    document.getElementById("scoresForm").addEventListener("submit", function () {
        // Show loader when form is submitted
        showLoader();
    });

    // Optional: You might want to hide the loader when the page is loaded initially
     window.addEventListener("load", function () {
         hideLoader();
     });




    </script>
}




